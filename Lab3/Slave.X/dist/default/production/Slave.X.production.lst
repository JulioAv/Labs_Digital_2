

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Aug 02 10:18:08 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  0105                     	;# 
   119  0107                     	;# 
   120  0108                     	;# 
   121  0109                     	;# 
   122  010C                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  0185                     	;# 
   128  0187                     	;# 
   129  0188                     	;# 
   130  0189                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  0105                     	;# 
   197  0107                     	;# 
   198  0108                     	;# 
   199  0109                     	;# 
   200  010C                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0187                     	;# 
   207  0188                     	;# 
   208  0189                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  000E                     	;# 
   227  000F                     	;# 
   228  0010                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0015                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001D                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  0087                     	;# 
   250  0088                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  0008                     	;# 
   298  0009                     	;# 
   299  000A                     	;# 
   300  000B                     	;# 
   301  000C                     	;# 
   302  000D                     	;# 
   303  000E                     	;# 
   304  000E                     	;# 
   305  000F                     	;# 
   306  0010                     	;# 
   307  0011                     	;# 
   308  0012                     	;# 
   309  0013                     	;# 
   310  0014                     	;# 
   311  0015                     	;# 
   312  0015                     	;# 
   313  0016                     	;# 
   314  0017                     	;# 
   315  0018                     	;# 
   316  0019                     	;# 
   317  001A                     	;# 
   318  001B                     	;# 
   319  001B                     	;# 
   320  001C                     	;# 
   321  001D                     	;# 
   322  001E                     	;# 
   323  001F                     	;# 
   324  0081                     	;# 
   325  0085                     	;# 
   326  0086                     	;# 
   327  0087                     	;# 
   328  0088                     	;# 
   329  0089                     	;# 
   330  008C                     	;# 
   331  008D                     	;# 
   332  008E                     	;# 
   333  008F                     	;# 
   334  0090                     	;# 
   335  0091                     	;# 
   336  0092                     	;# 
   337  0093                     	;# 
   338  0093                     	;# 
   339  0093                     	;# 
   340  0094                     	;# 
   341  0095                     	;# 
   342  0096                     	;# 
   343  0097                     	;# 
   344  0098                     	;# 
   345  0099                     	;# 
   346  009A                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  0105                     	;# 
   353  0107                     	;# 
   354  0108                     	;# 
   355  0109                     	;# 
   356  010C                     	;# 
   357  010C                     	;# 
   358  010D                     	;# 
   359  010E                     	;# 
   360  010F                     	;# 
   361  0185                     	;# 
   362  0187                     	;# 
   363  0188                     	;# 
   364  0189                     	;# 
   365  018C                     	;# 
   366  018D                     	;# 
   367  000C                     _PIR1bits	set	12
   368  000B                     _INTCONbits	set	11
   369  001E                     _ADRESH	set	30
   370  0013                     _SSPBUF	set	19
   371  0014                     _SSPCON	set	20
   372  001F                     _ADCON0bits	set	31
   373  0063                     _SSPIF	set	99
   374  0066                     _ADIF	set	102
   375  008C                     _PIE1bits	set	140
   376  008F                     _OSCCONbits	set	143
   377  0088                     _TRISD	set	136
   378  0087                     _TRISC	set	135
   379  0086                     _TRISB	set	134
   380  0085                     _TRISA	set	133
   381  0094                     _SSPSTATbits	set	148
   382  0094                     _SSPSTAT	set	148
   383  009F                     _ADCON1bits	set	159
   384  043B                     _TRISC3	set	1083
   385  043D                     _TRISC5	set	1085
   386  0189                     _ANSELH	set	393
   387  0188                     _ANSEL	set	392
   388                           
   389                           	psect	cinit
   390  000F                     start_initialization:	
   391                           ; #config settings
   392                           
   393  000F                     __initialization:
   394                           
   395                           ; Clear objects allocated to COMMON
   396  000F  01F0               	clrf	__pbssCOMMON& (0+127)
   397  0010  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   398  0011  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   399  0012  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   400  0013  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   401  0014                     end_of_initialization:	
   402                           ;End of C runtime variable initialization code
   403                           
   404  0014                     __end_of__initialization:
   405  0014  0183               	clrf	3
   406  0015  120A  118A  28F6   	ljmp	_main	;jump to C main() function
   407                           
   408                           	psect	bssCOMMON
   409  0070                     __pbssCOMMON:
   410  0070                     _temp:
   411  0070                     	ds	1
   412  0071                     _data:
   413  0071                     	ds	1
   414  0072                     _potsel:
   415  0072                     	ds	1
   416  0073                     _pot2:
   417  0073                     	ds	1
   418  0074                     _pot1:
   419  0074                     	ds	1
   420                           
   421                           	psect	cstackCOMMON
   422  0075                     __pcstackCOMMON:
   423  0075                     ?_ADC_IF:
   424  0075                     ?_spiReceiveWait:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0075                     ??_spiReceiveWait:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0075                     ?_spiWrite:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0075                     ??_spiWrite:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0075                     ?_spiRead:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0075                     ??_spiRead:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0075                     ?_isr:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0075                     ?_setup:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0075                     ?_main:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0075                     spiWrite@dat:	
   452                           ; 1 bytes @ 0x0
   453                           
   454                           
   455                           ; 1 bytes @ 0x0
   456  0075                     	ds	1
   457  0076                     ??_isr:
   458                           
   459                           ; 1 bytes @ 0x1
   460  0076                     	ds	3
   461  0079                     ??_ADC_CONFIG:
   462  0079                     ??_ADC_IF:	
   463                           ; 1 bytes @ 0x4
   464                           
   465  0079                     ??_spiInit:	
   466                           ; 1 bytes @ 0x4
   467                           
   468  0079                     spiInit@sType:	
   469                           ; 1 bytes @ 0x4
   470                           
   471                           
   472                           ; 1 bytes @ 0x4
   473  0079                     	ds	1
   474  007A                     ??_setup:
   475  007A                     ??_main:	
   476                           ; 1 bytes @ 0x5
   477                           
   478                           
   479                           	psect	cstackBANK0
   480  0020                     __pcstackBANK0:	
   481                           ; 1 bytes @ 0x5
   482                           
   483  0020                     ?_ADC_CONFIG:
   484  0020                     ?_spiInit:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0020                     spiInit@sDataSample:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0020                     ADC_CONFIG@frec:	
   491                           ; 1 bytes @ 0x0
   492                           
   493                           
   494                           ; 2 bytes @ 0x0
   495  0020                     	ds	1
   496  0021                     spiInit@sClockIdle:
   497                           
   498                           ; 1 bytes @ 0x1
   499  0021                     	ds	1
   500  0022                     spiInit@sTransmitEdge:
   501                           
   502                           ; 1 bytes @ 0x2
   503  0022                     	ds	1
   504                           
   505                           	psect	maintext
   506  00F6                     __pmaintext:	
   507 ;;
   508 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   509 ;;
   510 ;; *************** function _main *****************
   511 ;; Defined at:
   512 ;;		line 76 in file "Slave.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;		None
   515 ;; Auto vars:     Size  Location     Type
   516 ;;		None
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : B00/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   526 ;;      Params:         0       0       0       0       0
   527 ;;      Locals:         0       0       0       0       0
   528 ;;      Temps:          0       0       0       0       0
   529 ;;      Totals:         0       0       0       0       0
   530 ;;Total ram usage:        0 bytes
   531 ;; Hardware stack levels required when called:    5
   532 ;; This function calls:
   533 ;;		_ADC_IF
   534 ;;		_setup
   535 ;; This function is called by:
   536 ;;		Startup code after reset
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540                           
   541                           ;psect for function _main
   542  00F6                     _main:
   543  00F6                     l1004:	
   544                           ;incstack = 0
   545                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   546                           
   547                           
   548                           ;Slave.c: 77:     setup();
   549  00F6  120A  118A  205B  120A  118A  	fcall	_setup
   550  00FB                     l1006:
   551                           
   552                           ;Slave.c: 80:         ADC_IF();
   553  00FB  120A  118A  20D8  120A  118A  	fcall	_ADC_IF
   554  0100  28FB               	goto	l1006
   555  0101  120A  118A  280C   	ljmp	start
   556  0104                     __end_of_main:
   557                           
   558                           	psect	text1
   559  005B                     __ptext1:	
   560 ;; *************** function _setup *****************
   561 ;; Defined at:
   562 ;;		line 52 in file "Slave.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;		None
   565 ;; Auto vars:     Size  Location     Type
   566 ;;		None
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      void 
   569 ;; Registers used:
   570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   576 ;;      Params:         0       0       0       0       0
   577 ;;      Locals:         0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0
   579 ;;      Totals:         0       0       0       0       0
   580 ;;Total ram usage:        0 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; Hardware stack levels required when called:    4
   583 ;; This function calls:
   584 ;;		_ADC_CONFIG
   585 ;;		_spiInit
   586 ;; This function is called by:
   587 ;;		_main
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           
   592                           ;psect for function _setup
   593  005B                     _setup:
   594  005B                     l974:	
   595                           ;incstack = 0
   596                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   597                           
   598                           
   599                           ;Slave.c: 53:     ANSEL = 0x03;
   600  005B  3003               	movlw	3
   601  005C  1683               	bsf	3,5	;RP0=1, select bank3
   602  005D  1703               	bsf	3,6	;RP1=1, select bank3
   603  005E  0088               	movwf	8	;volatile
   604  005F                     l976:
   605                           
   606                           ;Slave.c: 54:     ANSELH = 0x00;
   607  005F  0189               	clrf	9	;volatile
   608  0060                     l978:
   609                           
   610                           ;Slave.c: 56:     TRISA = 0x23;
   611  0060  3023               	movlw	35
   612  0061  1683               	bsf	3,5	;RP0=1, select bank1
   613  0062  1303               	bcf	3,6	;RP1=0, select bank1
   614  0063  0085               	movwf	5	;volatile
   615                           
   616                           ;Slave.c: 57:     TRISB = 0x00;
   617  0064  0186               	clrf	6	;volatile
   618  0065                     l980:
   619                           
   620                           ;Slave.c: 58:     TRISC = 0x18;
   621  0065  3018               	movlw	24
   622  0066  0087               	movwf	7	;volatile
   623  0067                     l982:
   624                           
   625                           ;Slave.c: 59:     TRISD = 0x00;
   626  0067  0188               	clrf	8	;volatile
   627  0068                     l984:
   628                           
   629                           ;Slave.c: 61:     ADC_CONFIG(8);
   630  0068  3008               	movlw	8
   631  0069  1283               	bcf	3,5	;RP0=0, select bank0
   632  006A  1303               	bcf	3,6	;RP1=0, select bank0
   633  006B  00A0               	movwf	ADC_CONFIG@frec
   634  006C  3000               	movlw	0
   635  006D  00A1               	movwf	ADC_CONFIG@frec+1
   636  006E  120A  118A  208E  120A  118A  	fcall	_ADC_CONFIG
   637  0073                     l986:
   638                           
   639                           ;Slave.c: 63:     OSCCONbits.IRCF = 0B111;
   640  0073  3070               	movlw	112
   641  0074  1683               	bsf	3,5	;RP0=1, select bank1
   642  0075  1303               	bcf	3,6	;RP1=0, select bank1
   643  0076  048F               	iorwf	15,f	;volatile
   644  0077                     l988:
   645                           
   646                           ;Slave.c: 64:     OSCCONbits.OSTS = 0;
   647  0077  118F               	bcf	15,3	;volatile
   648  0078                     l990:
   649                           
   650                           ;Slave.c: 65:     OSCCONbits.SCS = 1;
   651  0078  140F               	bsf	15,0	;volatile
   652  0079                     l992:
   653                           
   654                           ;Slave.c: 67:     PIE1bits.ADIE = 1;
   655  0079  170C               	bsf	12,6	;volatile
   656  007A                     l994:
   657                           
   658                           ;Slave.c: 68:     INTCONbits.PEIE = 1;
   659  007A  170B               	bsf	11,6	;volatile
   660  007B                     l996:
   661                           
   662                           ;Slave.c: 69:     PIR1bits.SSPIF = 0;
   663  007B  1283               	bcf	3,5	;RP0=0, select bank0
   664  007C  1303               	bcf	3,6	;RP1=0, select bank0
   665  007D  118C               	bcf	12,3	;volatile
   666  007E                     l998:
   667                           
   668                           ;Slave.c: 70:     PIE1bits.SSPIE = 1;
   669  007E  1683               	bsf	3,5	;RP0=1, select bank1
   670  007F  1303               	bcf	3,6	;RP1=0, select bank1
   671  0080  158C               	bsf	12,3	;volatile
   672  0081                     l1000:
   673                           
   674                           ;Slave.c: 72:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, S
      +                          PI_IDLE_2_ACTIVE);
   675  0081  1283               	bcf	3,5	;RP0=0, select bank0
   676  0082  1303               	bcf	3,6	;RP1=0, select bank0
   677  0083  01A0               	clrf	spiInit@sDataSample
   678  0084  01A1               	clrf	spiInit@sClockIdle
   679  0085  01A2               	clrf	spiInit@sTransmitEdge
   680  0086  3024               	movlw	36
   681  0087  120A  118A  20BA  120A  118A  	fcall	_spiInit
   682  008C                     l1002:
   683                           
   684                           ;Slave.c: 73:     INTCONbits.GIE = 1;
   685  008C  178B               	bsf	11,7	;volatile
   686  008D                     l114:
   687  008D  0008               	return
   688  008E                     __end_of_setup:
   689                           
   690                           	psect	text2
   691  00BA                     __ptext2:	
   692 ;; *************** function _spiInit *****************
   693 ;; Defined at:
   694 ;;		line 12 in file "SPI.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;  sType           1    wreg     enum E1264
   697 ;;  sDataSample     1    0[BANK0 ] enum E1272
   698 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   699 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  sType           1    4[COMMON] enum E1264
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, status,2, status,0
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   711 ;;      Params:         0       3       0       0       0
   712 ;;      Locals:         1       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0
   714 ;;      Totals:         1       3       0       0       0
   715 ;;Total ram usage:        4 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; Hardware stack levels required when called:    3
   718 ;; This function calls:
   719 ;;		Nothing
   720 ;; This function is called by:
   721 ;;		_setup
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           
   726                           ;psect for function _spiInit
   727  00BA                     _spiInit:
   728                           
   729                           ;incstack = 0
   730                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   731                           ;spiInit@sType stored from wreg
   732  00BA  00F9               	movwf	spiInit@sType
   733  00BB                     l964:
   734                           
   735                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
   736  00BB  1683               	bsf	3,5	;RP0=1, select bank1
   737  00BC  1303               	bcf	3,6	;RP1=0, select bank1
   738  00BD  1287               	bcf	7,5	;volatile
   739                           
   740                           ;SPI.c: 15:     if(sType & 0b00000100)
   741  00BE  1D79               	btfss	spiInit@sType,2
   742  00BF  28C1               	goto	u91
   743  00C0  28C2               	goto	u90
   744  00C1                     u91:
   745  00C1  28CA               	goto	l970
   746  00C2                     u90:
   747  00C2                     l966:
   748                           
   749                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
   750  00C2  1283               	bcf	3,5	;RP0=0, select bank0
   751  00C3  1303               	bcf	3,6	;RP1=0, select bank0
   752  00C4  0822               	movf	spiInit@sTransmitEdge,w
   753  00C5  1683               	bsf	3,5	;RP0=1, select bank1
   754  00C6  1303               	bcf	3,6	;RP1=0, select bank1
   755  00C7  0094               	movwf	20	;volatile
   756  00C8                     l968:
   757                           
   758                           ;SPI.c: 18:         TRISC3 = 1;
   759  00C8  1587               	bsf	7,3	;volatile
   760                           
   761                           ;SPI.c: 19:     }
   762  00C9  28D2               	goto	l36
   763  00CA                     l970:
   764                           
   765                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
   766  00CA  1283               	bcf	3,5	;RP0=0, select bank0
   767  00CB  1303               	bcf	3,6	;RP1=0, select bank0
   768  00CC  0820               	movf	spiInit@sDataSample,w
   769  00CD  0422               	iorwf	spiInit@sTransmitEdge,w
   770  00CE  1683               	bsf	3,5	;RP0=1, select bank1
   771  00CF  1303               	bcf	3,6	;RP1=0, select bank1
   772  00D0  0094               	movwf	20	;volatile
   773  00D1                     l972:
   774                           
   775                           ;SPI.c: 23:         TRISC3 = 0;
   776  00D1  1187               	bcf	7,3	;volatile
   777  00D2                     l36:	
   778                           ;SPI.c: 24:     }
   779                           
   780                           
   781                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
   782  00D2  0879               	movf	spiInit@sType,w
   783  00D3  1283               	bcf	3,5	;RP0=0, select bank0
   784  00D4  1303               	bcf	3,6	;RP1=0, select bank0
   785  00D5  0421               	iorwf	spiInit@sClockIdle,w
   786  00D6  0094               	movwf	20	;volatile
   787  00D7                     l37:
   788  00D7  0008               	return
   789  00D8                     __end_of_spiInit:
   790                           
   791                           	psect	text3
   792  008E                     __ptext3:	
   793 ;; *************** function _ADC_CONFIG *****************
   794 ;; Defined at:
   795 ;;		line 14 in file "ADC.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;  frec            2    0[BANK0 ] int 
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   809 ;;      Params:         0       2       0       0       0
   810 ;;      Locals:         0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0
   812 ;;      Totals:         0       2       0       0       0
   813 ;;Total ram usage:        2 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:    3
   816 ;; This function calls:
   817 ;;		Nothing
   818 ;; This function is called by:
   819 ;;		_setup
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           
   824                           ;psect for function _ADC_CONFIG
   825  008E                     _ADC_CONFIG:
   826  008E                     l938:	
   827                           ;incstack = 0
   828                           ; Regs used in _ADC_CONFIG: [wreg-fsr0h+status,2+status,0]
   829                           
   830                           
   831                           ;ADC.c: 16:     ADCON0bits.ADON = 1;
   832  008E  1283               	bcf	3,5	;RP0=0, select bank0
   833  008F  1303               	bcf	3,6	;RP1=0, select bank0
   834  0090  141F               	bsf	31,0	;volatile
   835  0091                     l940:
   836                           
   837                           ;ADC.c: 17:     ADCON0bits.CHS = 0;
   838  0091  30C3               	movlw	-61
   839  0092  059F               	andwf	31,f	;volatile
   840  0093                     l942:
   841                           
   842                           ;ADC.c: 18:     ADCON1bits.ADFM = 0;
   843  0093  1683               	bsf	3,5	;RP0=1, select bank1
   844  0094  1303               	bcf	3,6	;RP1=0, select bank1
   845  0095  139F               	bcf	31,7	;volatile
   846  0096                     l944:
   847                           
   848                           ;ADC.c: 19:     ADCON1bits.VCFG0 = 0;
   849  0096  121F               	bcf	31,4	;volatile
   850  0097                     l946:
   851                           
   852                           ;ADC.c: 20:     ADCON1bits.VCFG1 = 0;
   853  0097  129F               	bcf	31,5	;volatile
   854  0098                     l948:
   855                           
   856                           ;ADC.c: 21:     ADCON0bits.GO = 0;
   857  0098  1283               	bcf	3,5	;RP0=0, select bank0
   858  0099  1303               	bcf	3,6	;RP1=0, select bank0
   859  009A  109F               	bcf	31,1	;volatile
   860                           
   861                           ;ADC.c: 23:     switch(frec){
   862  009B  28A9               	goto	l958
   863  009C                     l950:
   864                           
   865                           ;ADC.c: 25:             ADCON0bits.ADCS = 0B00;
   866  009C  303F               	movlw	-193
   867  009D  059F               	andwf	31,f	;volatile
   868                           
   869                           ;ADC.c: 26:             break;
   870  009E  28B9               	goto	l14
   871  009F                     l952:
   872                           
   873                           ;ADC.c: 28:             ADCON0bits.ADCS = 0B01;
   874  009F  081F               	movf	31,w	;volatile
   875  00A0  393F               	andlw	-193
   876  00A1  3840               	iorlw	64
   877  00A2  009F               	movwf	31	;volatile
   878                           
   879                           ;ADC.c: 29:             break;
   880  00A3  28B9               	goto	l14
   881  00A4                     l954:
   882                           
   883                           ;ADC.c: 31:             ADCON0bits.ADCS = 0B10;
   884  00A4  081F               	movf	31,w	;volatile
   885  00A5  393F               	andlw	-193
   886  00A6  3880               	iorlw	128
   887  00A7  009F               	movwf	31	;volatile
   888                           
   889                           ;ADC.c: 32:             break;
   890  00A8  28B9               	goto	l14
   891  00A9                     l958:
   892                           
   893                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   894                           ; Switch size 1, requested type "simple"
   895                           ; Number of cases is 1, Range of values is 0 to 0
   896                           ; switch strategies available:
   897                           ; Name         Instructions Cycles
   898                           ; simple_byte            4     3 (average)
   899                           ; direct_byte           11     8 (fixed)
   900                           ; jumptable            260     6 (fixed)
   901                           ;	Chosen strategy is simple_byte
   902  00A9  0821               	movf	ADC_CONFIG@frec+1,w
   903  00AA  3A00               	xorlw	0	; case 0
   904  00AB  1903               	skipnz
   905  00AC  28AE               	goto	l1028
   906  00AD  28B9               	goto	l14
   907  00AE                     l1028:
   908                           
   909                           ; Switch size 1, requested type "simple"
   910                           ; Number of cases is 3, Range of values is 1 to 8
   911                           ; switch strategies available:
   912                           ; Name         Instructions Cycles
   913                           ; simple_byte           10     6 (average)
   914                           ; direct_byte           35    11 (fixed)
   915                           ; jumptable            263     9 (fixed)
   916                           ;	Chosen strategy is simple_byte
   917  00AE  0820               	movf	ADC_CONFIG@frec,w
   918  00AF  3A01               	xorlw	1	; case 1
   919  00B0  1903               	skipnz
   920  00B1  289C               	goto	l950
   921  00B2  3A05               	xorlw	5	; case 4
   922  00B3  1903               	skipnz
   923  00B4  289F               	goto	l952
   924  00B5  3A0C               	xorlw	12	; case 8
   925  00B6  1903               	skipnz
   926  00B7  28A4               	goto	l954
   927  00B8  28B9               	goto	l14
   928  00B9                     l14:
   929  00B9  0008               	return
   930  00BA                     __end_of_ADC_CONFIG:
   931                           
   932                           	psect	text4
   933  00D8                     __ptext4:	
   934 ;; *************** function _ADC_IF *****************
   935 ;; Defined at:
   936 ;;		line 36 in file "ADC.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;		None
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, status,2, status,0
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   950 ;;      Params:         0       0       0       0       0
   951 ;;      Locals:         0       0       0       0       0
   952 ;;      Temps:          1       0       0       0       0
   953 ;;      Totals:         1       0       0       0       0
   954 ;;Total ram usage:        1 bytes
   955 ;; Hardware stack levels used:    1
   956 ;; Hardware stack levels required when called:    3
   957 ;; This function calls:
   958 ;;		Nothing
   959 ;; This function is called by:
   960 ;;		_main
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           
   965                           ;psect for function _ADC_IF
   966  00D8                     _ADC_IF:
   967  00D8                     l752:	
   968                           ;incstack = 0
   969                           ; Regs used in _ADC_IF: [wreg+status,2+status,0]
   970                           
   971                           
   972                           ;ADC.c: 37:     if (ADCON0bits.GO == 0){
   973  00D8  1283               	bcf	3,5	;RP0=0, select bank0
   974  00D9  1303               	bcf	3,6	;RP1=0, select bank0
   975  00DA  189F               	btfsc	31,1	;volatile
   976  00DB  28DD               	goto	u31
   977  00DC  28DE               	goto	u30
   978  00DD                     u31:
   979  00DD  28F5               	goto	l20
   980  00DE                     u30:
   981  00DE                     l754:
   982                           
   983                           ;ADC.c: 38:             if(ADCON0bits.CHS == 0){
   984  00DE  0C1F               	rrf	31,w	;volatile
   985  00DF  00F9               	movwf	??_ADC_IF
   986  00E0  0C79               	rrf	??_ADC_IF,w
   987  00E1  390F               	andlw	15
   988  00E2  3A00               	xorlw	0
   989  00E3  1D03               	skipz
   990  00E4  28E6               	goto	u41
   991  00E5  28E7               	goto	u40
   992  00E6                     u41:
   993  00E6  28EC               	goto	l758
   994  00E7                     u40:
   995  00E7                     l756:
   996                           
   997                           ;ADC.c: 39:                 ADCON0bits.CHS = 1;
   998  00E7  081F               	movf	31,w	;volatile
   999  00E8  39C3               	andlw	-61
  1000  00E9  3804               	iorlw	4
  1001  00EA  009F               	movwf	31	;volatile
  1002                           
  1003                           ;ADC.c: 40:             }
  1004  00EB  28EE               	goto	l760
  1005  00EC                     l758:
  1006                           
  1007                           ;ADC.c: 42:                 ADCON0bits.CHS = 0;
  1008  00EC  30C3               	movlw	-61
  1009  00ED  059F               	andwf	31,f	;volatile
  1010  00EE                     l760:
  1011                           
  1012                           ;ADC.c: 44:             _delay((unsigned long)((50)*(8000000/4000000.0)));
  1013  00EE  3021               	movlw	33
  1014  00EF  00F9               	movwf	??_ADC_IF
  1015  00F0                     u107:
  1016  00F0  0BF9               	decfsz	??_ADC_IF,f
  1017  00F1  28F0               	goto	u107
  1018  00F2                     l762:
  1019                           
  1020                           ;ADC.c: 45:             ADCON0bits.GO = 1;
  1021  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1022  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1023  00F4  149F               	bsf	31,1	;volatile
  1024  00F5                     l20:
  1025  00F5  0008               	return
  1026  00F6                     __end_of_ADC_IF:
  1027                           
  1028                           	psect	text5
  1029  0018                     __ptext5:	
  1030 ;; *************** function _isr *****************
  1031 ;; Defined at:
  1032 ;;		line 32 in file "Slave.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;		None
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;		None
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      void 
  1039 ;; Registers used:
  1040 ;;		wreg, status,2, status,0, pclath, cstack
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1046 ;;      Params:         0       0       0       0       0
  1047 ;;      Locals:         0       0       0       0       0
  1048 ;;      Temps:          3       0       0       0       0
  1049 ;;      Totals:         3       0       0       0       0
  1050 ;;Total ram usage:        3 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; Hardware stack levels required when called:    2
  1053 ;; This function calls:
  1054 ;;		_spiRead
  1055 ;;		_spiWrite
  1056 ;; This function is called by:
  1057 ;;		Interrupt level 1
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           
  1062                           ;psect for function _isr
  1063  0018                     _isr:
  1064  0018                     i1l808:
  1065                           
  1066                           ;Slave.c: 33:     if (ADIF){
  1067  0018  1283               	bcf	3,5	;RP0=0, select bank0
  1068  0019  1303               	bcf	3,6	;RP1=0, select bank0
  1069  001A  1F0C               	btfss	12,6	;volatile
  1070  001B  281D               	goto	u5_21
  1071  001C  281E               	goto	u5_20
  1072  001D                     u5_21:
  1073  001D  2831               	goto	i1l818
  1074  001E                     u5_20:
  1075  001E                     i1l810:
  1076                           
  1077                           ;Slave.c: 34:         if (ADCON0bits.CHS == 0){
  1078  001E  0C1F               	rrf	31,w	;volatile
  1079  001F  00F6               	movwf	??_isr
  1080  0020  0C76               	rrf	??_isr,w
  1081  0021  390F               	andlw	15
  1082  0022  3A00               	xorlw	0
  1083  0023  1D03               	skipz
  1084  0024  2826               	goto	u6_21
  1085  0025  2827               	goto	u6_20
  1086  0026                     u6_21:
  1087  0026  282C               	goto	i1l814
  1088  0027                     u6_20:
  1089  0027                     i1l812:
  1090                           
  1091                           ;Slave.c: 35:             pot1 = ADRESH;
  1092  0027  081E               	movf	30,w	;volatile
  1093  0028  00F6               	movwf	??_isr
  1094  0029  0876               	movf	??_isr,w
  1095  002A  00F4               	movwf	_pot1
  1096                           
  1097                           ;Slave.c: 36:         }
  1098  002B  2830               	goto	i1l816
  1099  002C                     i1l814:
  1100                           
  1101                           ;Slave.c: 38:             pot2 = ADRESH;
  1102  002C  081E               	movf	30,w	;volatile
  1103  002D  00F6               	movwf	??_isr
  1104  002E  0876               	movf	??_isr,w
  1105  002F  00F3               	movwf	_pot2
  1106  0030                     i1l816:
  1107                           
  1108                           ;Slave.c: 41:         ADIF = 0;
  1109  0030  130C               	bcf	12,6	;volatile
  1110  0031                     i1l818:
  1111                           
  1112                           ;Slave.c: 43:     if(SSPIF == 1){
  1113  0031  1D8C               	btfss	12,3	;volatile
  1114  0032  2834               	goto	u7_21
  1115  0033  2835               	goto	u7_20
  1116  0034                     u7_21:
  1117  0034  2854               	goto	i1l111
  1118  0035                     u7_20:
  1119  0035                     i1l820:
  1120                           
  1121                           ;Slave.c: 44:         potsel = spiRead();
  1122  0035  120A  118A  2104  120A  118A  	fcall	_spiRead
  1123  003A  00F6               	movwf	??_isr
  1124  003B  0876               	movf	??_isr,w
  1125  003C  00F2               	movwf	_potsel
  1126                           
  1127                           ;Slave.c: 45:         spiWrite(pot1);
  1128  003D  0874               	movf	_pot1,w
  1129  003E  120A  118A  2114  120A  118A  	fcall	_spiWrite
  1130                           
  1131                           ;Slave.c: 46:         potsel = spiRead();
  1132  0043  120A  118A  2104  120A  118A  	fcall	_spiRead
  1133  0048  00F6               	movwf	??_isr
  1134  0049  0876               	movf	??_isr,w
  1135  004A  00F2               	movwf	_potsel
  1136                           
  1137                           ;Slave.c: 47:         spiWrite(pot2);
  1138  004B  0873               	movf	_pot2,w
  1139  004C  120A  118A  2114  120A  118A  	fcall	_spiWrite
  1140  0051                     i1l822:
  1141                           
  1142                           ;Slave.c: 48:         SSPIF = 0;
  1143  0051  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0052  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0053  118C               	bcf	12,3	;volatile
  1146  0054                     i1l111:
  1147  0054  0878               	movf	??_isr+2,w
  1148  0055  008A               	movwf	10
  1149  0056  0E77               	swapf	??_isr+1,w
  1150  0057  0083               	movwf	3
  1151  0058  0EFE               	swapf	btemp,f
  1152  0059  0E7E               	swapf	btemp,w
  1153  005A  0009               	retfie
  1154  005B                     __end_of_isr:
  1155                           
  1156                           	psect	intentry
  1157  0004                     __pintentry:	
  1158                           ;incstack = 0
  1159                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  1160                           
  1161  0004                     interrupt_function:
  1162  007E                     saved_w	set	btemp
  1163  0004  00FE               	movwf	btemp
  1164  0005  0E03               	swapf	3,w
  1165  0006  00F7               	movwf	??_isr+1
  1166  0007  080A               	movf	10,w
  1167  0008  00F8               	movwf	??_isr+2
  1168  0009  120A  118A  2818   	ljmp	_isr
  1169                           
  1170                           	psect	text6
  1171  0114                     __ptext6:	
  1172 ;; *************** function _spiWrite *****************
  1173 ;; Defined at:
  1174 ;;		line 34 in file "SPI.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  dat             1    wreg     unsigned char 
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  dat             1    0[COMMON] unsigned char 
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		wreg
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1188 ;;      Params:         0       0       0       0       0
  1189 ;;      Locals:         1       0       0       0       0
  1190 ;;      Temps:          0       0       0       0       0
  1191 ;;      Totals:         1       0       0       0       0
  1192 ;;Total ram usage:        1 bytes
  1193 ;; Hardware stack levels used:    1
  1194 ;; This function calls:
  1195 ;;		Nothing
  1196 ;; This function is called by:
  1197 ;;		_isr
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           
  1202                           ;psect for function _spiWrite
  1203  0114                     _spiWrite:
  1204                           
  1205                           ;incstack = 0
  1206                           ; Regs used in _spiWrite: [wreg]
  1207                           ;spiWrite@dat stored from wreg
  1208  0114  00F5               	movwf	spiWrite@dat
  1209  0115                     i1l764:
  1210                           
  1211                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
  1212  0115  0875               	movf	spiWrite@dat,w
  1213  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1214  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1215  0118  0093               	movwf	19	;volatile
  1216  0119                     i1l46:
  1217  0119  0008               	return
  1218  011A                     __end_of_spiWrite:
  1219                           
  1220                           	psect	text7
  1221  0104                     __ptext7:	
  1222 ;; *************** function _spiRead *****************
  1223 ;; Defined at:
  1224 ;;		line 47 in file "SPI.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;		None
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;		None
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1    wreg      unsigned char 
  1231 ;; Registers used:
  1232 ;;		wreg, status,2, status,0, pclath, cstack
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1238 ;;      Params:         0       0       0       0       0
  1239 ;;      Locals:         0       0       0       0       0
  1240 ;;      Temps:          0       0       0       0       0
  1241 ;;      Totals:         0       0       0       0       0
  1242 ;;Total ram usage:        0 bytes
  1243 ;; Hardware stack levels used:    1
  1244 ;; Hardware stack levels required when called:    1
  1245 ;; This function calls:
  1246 ;;		_spiReceiveWait
  1247 ;; This function is called by:
  1248 ;;		_isr
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           
  1253                           ;psect for function _spiRead
  1254  0104                     _spiRead:
  1255  0104                     i1l766:	
  1256                           ;incstack = 0
  1257                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1258                           
  1259                           
  1260                           ;SPI.c: 49:     spiReceiveWait();
  1261  0104  120A  118A  210D  120A  118A  	fcall	_spiReceiveWait
  1262  0109                     i1l768:
  1263                           
  1264                           ;SPI.c: 50:     return(SSPBUF);
  1265  0109  1283               	bcf	3,5	;RP0=0, select bank0
  1266  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1267  010B  0813               	movf	19,w	;volatile
  1268  010C                     i1l54:
  1269  010C  0008               	return
  1270  010D                     __end_of_spiRead:
  1271                           
  1272                           	psect	text8
  1273  010D                     __ptext8:	
  1274 ;; *************** function _spiReceiveWait *****************
  1275 ;; Defined at:
  1276 ;;		line 29 in file "SPI.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;		None
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;		None
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		None
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1290 ;;      Params:         0       0       0       0       0
  1291 ;;      Locals:         0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0
  1293 ;;      Totals:         0       0       0       0       0
  1294 ;;Total ram usage:        0 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; This function calls:
  1297 ;;		Nothing
  1298 ;; This function is called by:
  1299 ;;		_spiRead
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           
  1304                           ;psect for function _spiReceiveWait
  1305  010D                     _spiReceiveWait:
  1306  010D                     i1l750:	
  1307                           ;incstack = 0
  1308                           ; Regs used in _spiReceiveWait: []
  1309                           
  1310  010D                     i1l40:	
  1311                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  1312                           
  1313  010D  1683               	bsf	3,5	;RP0=1, select bank1
  1314  010E  1303               	bcf	3,6	;RP1=0, select bank1
  1315  010F  1C14               	btfss	20,0	;volatile
  1316  0110  2912               	goto	u2_21
  1317  0111  2913               	goto	u2_20
  1318  0112                     u2_21:
  1319  0112  290D               	goto	i1l40
  1320  0113                     u2_20:
  1321  0113                     i1l43:
  1322  0113  0008               	return
  1323  0114                     __end_of_spiReceiveWait:
  1324  007E                     btemp	set	126	;btemp
  1325  007E                     wtemp0	set	126
  1326                           
  1327                           	psect	config
  1328                           
  1329                           ;Config register CONFIG1 @ 0x2007
  1330                           ;	Oscillator Selection bits
  1331                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1332                           ;	Watchdog Timer Enable bit
  1333                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1334                           ;	Power-up Timer Enable bit
  1335                           ;	PWRTE = ON, PWRT enabled
  1336                           ;	RE3/MCLR pin function select bit
  1337                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1338                           ;	Code Protection bit
  1339                           ;	CP = OFF, Program memory code protection is disabled
  1340                           ;	Data Code Protection bit
  1341                           ;	CPD = OFF, Data memory code protection is disabled
  1342                           ;	Brown Out Reset Selection bits
  1343                           ;	BOREN = OFF, BOR disabled
  1344                           ;	Internal External Switchover bit
  1345                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1346                           ;	Fail-Safe Clock Monitor Enabled bit
  1347                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1348                           ;	Low Voltage Programming Enable bit
  1349                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1350                           ;	In-Circuit Debugger Mode bit
  1351                           ;	DEBUG = 0x1, unprogrammed default
  1352  2007                     	org	8199
  1353  2007  20C4               	dw	8388
  1354                           
  1355                           ;Config register CONFIG2 @ 0x2008
  1356                           ;	Brown-out Reset Selection bit
  1357                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1358                           ;	Flash Program Memory Self Write Enable bits
  1359                           ;	WRT = OFF, Write protection off
  1360  2008                     	org	8200
  1361  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      3       3
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_IF
    _setup->_spiInit

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _setup->_spiInit

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     577
                             _ADC_IF
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     577
                         _ADC_CONFIG
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     456
                                              4 COMMON     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _ADC_CONFIG                                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC_IF                                               1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (4) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (5) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_IF
   _setup
     _ADC_CONFIG
     _spiInit

 _isr (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       3       5        3.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       D      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Aug 02 10:18:08 2021

    __size_of_ADC_CONFIG 002C           ADC_CONFIG@frec 0020              _SSPSTATbits 0094  
                     l20 00F5                       l14 00B9                       l36 00D2  
                     l37 00D7                       u30 00DE                       u31 00DD  
                     u40 00E7                       u41 00E6                       u90 00C2  
                     u91 00C1                      l114 008D                      l760 00EE  
                    l752 00D8                      l762 00F2                      l754 00DE  
                    l756 00E7                      l940 0091                      l758 00EC  
                    l950 009C                      l942 0093                      l952 009F  
                    l944 0096                      l954 00A4                      l946 0097  
                    l938 008E                      l970 00CA                      l948 0098  
                    l972 00D1                      l964 00BB                      l980 0065  
                    l958 00A9                      l966 00C2                      l990 0078  
                    l982 0067                      l974 005B                      l968 00C8  
                    l992 0079                      l984 0068                      l976 005F  
                    l994 007A                      l986 0073                      l978 0060  
                    l996 007B                      l988 0077                      l998 007E  
                    u107 00F0                      _isr 0018                     l1000 0081  
                   l1002 008C                     l1004 00F6                     l1006 00FB  
                   l1028 00AE                     _ADIF 0066                     ?_isr 0075  
                   i1l40 010D                     i1l43 0113                     i1l54 010C  
                   i1l46 0119                     u2_20 0113                     u2_21 0112  
                   u5_20 001E                     u5_21 001D                     u6_20 0027  
                   u6_21 0026                     u7_20 0035                     u7_21 0034  
                   _data 0071                     _main 00F6                     _pot1 0074  
                   _pot2 0073                     _temp 0070                     btemp 007E  
                   start 000C                    ??_isr 0076                    ?_main 0075  
                  _ANSEL 0188                    i1l111 0054                    i1l810 001E  
                  i1l820 0035                    i1l812 0027                    i1l750 010D  
                  i1l822 0051                    i1l814 002C                    i1l816 0030  
                  i1l808 0018                    i1l818 0031                    i1l764 0115  
                  i1l766 0104                    i1l768 0109                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _SSPIF 0063                    _setup 005B                    pclath 000A  
        __end_of_spiInit 00D8          __end_of_spiRead 010D                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 0104  
                 ??_main 007A             ??_ADC_CONFIG 0079                   _ADC_IF 00D8  
                 _ADRESH 001E                   ?_setup 0075                   _ANSELH 0189  
                 _TRISC3 043B                   _TRISC5 043D                   _SSPCON 0014  
                 _SSPBUF 0013       __end_of_ADC_CONFIG 00BA                   _potsel 0072  
                 saved_w 007E         __end_of_spiWrite 011A                ??_spiInit 0079  
              ??_spiRead 0075  __end_of__initialization 0014           __pcstackCOMMON 0075  
          __end_of_setup 008E                  ?_ADC_IF 0075                  ??_setup 007A  
             __pmaintext 00F6               __pintentry 0004  __size_of_spiReceiveWait 0007  
        __size_of_ADC_IF 001E                  _SSPSTAT 0094                ?_spiWrite 0075  
                __ptext1 005B                  __ptext2 00BA                  __ptext3 008E  
                __ptext4 00D8                  __ptext5 0018                  __ptext6 0114  
                __ptext7 0104                  __ptext8 010D             __size_of_isr 0043  
                _spiInit 00BA                  _spiRead 0104     end_of_initialization 0014  
             ??_spiWrite 0075              spiWrite@dat 0075           __end_of_ADC_IF 00F6  
         _spiReceiveWait 010D      start_initialization 000F              __end_of_isr 005B  
               ??_ADC_IF 0079   __end_of_spiReceiveWait 0114              __pbssCOMMON 0070  
              ___latbits 0002            __pcstackBANK0 0020          ?_spiReceiveWait 0075  
      __size_of_spiWrite 0006                 ?_spiInit 0020                 ?_spiRead 0075  
         __size_of_setup 0033     spiInit@sTransmitEdge 0022        interrupt_function 0004  
               _PIE1bits 008C       spiInit@sDataSample 0020                 _PIR1bits 000C  
             _ADCON0bits 001F               _ADCON1bits 009F               _ADC_CONFIG 008E  
       __size_of_spiInit 001E         __size_of_spiRead 0009            __size_of_main 000E  
               _spiWrite 0114             spiInit@sType 0079        spiInit@sClockIdle 0021  
             _INTCONbits 000B              ?_ADC_CONFIG 0020                 intlevel1 0000  
       ??_spiReceiveWait 0075               _OSCCONbits 008F  
